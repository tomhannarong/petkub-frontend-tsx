{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Legion\\\\Desktop\\\\petkub-project\\\\petkub-frontend-tsx\\\\src\\\\context\\\\AuthContextProvider.tsx\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { ME } from '../apollo/queries';\nconst initialState = {\n  authAction: 'close',\n  handleAuthAction: () => {},\n  loggedInUser: null,\n  setAuthUser: () => {}\n};\nexport const AuthContext = /*#__PURE__*/createContext(initialState);\n\nconst AuthContextProvider = ({\n  children\n}) => {\n  const {\n    0: authAction,\n    1: setAuthAction\n  } = useState('close');\n  const {\n    0: loggedInUser,\n    1: setLoggedInUser\n  } = useState(null);\n  const {\n    data\n  } = useQuery(ME);\n  useEffect(() => {\n    if (data !== null && data !== void 0 && data.me) setLoggedInUser(data.me);\n  }, [data === null || data === void 0 ? void 0 : data.me]);\n\n  const handleAuthAction = action => {\n    setAuthAction(action);\n  };\n\n  const setAuthUser = user => setLoggedInUser(user);\n\n  console.log(loggedInUser);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authAction,\n      handleAuthAction,\n      loggedInUser,\n      setAuthUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\nexport default AuthContextProvider;","map":{"version":3,"sources":["C:/Users/Legion/Desktop/petkub-project/petkub-frontend-tsx/src/context/AuthContextProvider.tsx"],"names":["React","createContext","useState","useEffect","useQuery","ME","initialState","authAction","handleAuthAction","loggedInUser","setAuthUser","AuthContext","AuthContextProvider","children","setAuthAction","setLoggedInUser","data","me","action","user","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAGA,SAASC,EAAT,QAAmB,mBAAnB;AAeA,MAAMC,YAA+B,GAAG;AACtCC,EAAAA,UAAU,EAAE,OAD0B;AAEtCC,EAAAA,gBAAgB,EAAE,MAAM,CAAE,CAFY;AAGtCC,EAAAA,YAAY,EAAE,IAHwB;AAItCC,EAAAA,WAAW,EAAE,MAAM,CAAE;AAJiB,CAAxC;AAOA,OAAO,MAAMC,WAAW,gBAAGV,aAAa,CAAoBK,YAApB,CAAjC;;AAEP,MAAMM,mBAAoC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7D,QAAM;AAAA,OAACN,UAAD;AAAA,OAAaO;AAAb,MAA8BZ,QAAQ,CAAU,OAAV,CAA5C;AACA,QAAM;AAAA,OAACO,YAAD;AAAA,OAAeM;AAAf,MAAkCb,QAAQ,CAAc,IAAd,CAAhD;AAEA,QAAM;AAAEc,IAAAA;AAAF,MAAWZ,QAAQ,CAAeC,EAAf,CAAzB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEC,EAAV,EAAcF,eAAe,CAACC,IAAI,CAACC,EAAN,CAAf;AACf,GAFQ,EAEN,CAACD,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEC,EAAP,CAFM,CAAT;;AAIA,QAAMT,gBAAkC,GAAIU,MAAD,IAAY;AACrDJ,IAAAA,aAAa,CAACI,MAAD,CAAb;AACD,GAFD;;AAIA,QAAMR,WAAW,GAAIS,IAAD,IAAuBJ,eAAe,CAACI,IAAD,CAA1D;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,YAAZ;AACA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,UADK;AAELC,MAAAA,gBAFK;AAGLC,MAAAA,YAHK;AAILC,MAAAA;AAJK,KADT;AAAA,cAQGG;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA7BD;;AA+BA,eAAeD,mBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport { User } from '../types'\nimport { ME } from '../apollo/queries'\n\ninterface Props {}\n\ntype Actions = 'signup' | 'signin' | 'request' | 'reset' | 'close'\n\ntype HandleAuthAction = (action: Actions) => void\n\ninterface AuthContextValues {\n  authAction: Actions\n  handleAuthAction: HandleAuthAction\n  loggedInUser: User | null\n  setAuthUser: (user: User | null) => void\n}\n\nconst initialState: AuthContextValues = {\n  authAction: 'close',\n  handleAuthAction: () => {},\n  loggedInUser: null,\n  setAuthUser: () => {},\n}\n\nexport const AuthContext = createContext<AuthContextValues>(initialState)\n\nconst AuthContextProvider: React.FC<Props> = ({ children }) => {\n  const [authAction, setAuthAction] = useState<Actions>('close')\n  const [loggedInUser, setLoggedInUser] = useState<User | null>(null)\n\n  const { data } = useQuery<{ me: User }>(ME)\n\n  useEffect(() => {\n    if (data?.me) setLoggedInUser(data.me)\n  }, [data?.me])\n\n  const handleAuthAction: HandleAuthAction = (action) => {\n    setAuthAction(action)\n  }\n\n  const setAuthUser = (user: User | null) => setLoggedInUser(user)\n\n  console.log(loggedInUser)\n  return (\n    <AuthContext.Provider\n      value={{\n        authAction,\n        handleAuthAction,\n        loggedInUser,\n        setAuthUser,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport default AuthContextProvider"]},"metadata":{},"sourceType":"module"}